name: Build and Package Powershell Lambda
env:
    OUTPUT_PATH: ${{ github.workspace }}/.output
    S3_BUCKET_NAME: testinglambdaautionforstuff
    LAMBDA_FUNCTION: testlambda
    LAMBDA_REGION: us-east-2

on: 
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: [ubuntu-latest]
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2
      with:
        path: code
    - name: Retrieve the current package version
      id: package_version
      run: |
        pkgver=$(node ./code/scripts/get-pkg-version.js)
        echo ::set-output name=version::$pkgver
        echo "Version: $pkgver"
    - name: Install Powershell Modules
      if: success()
      run: |
        pwsh -command Write-Host 'Install and Import AWS Powershell Lambda Core'
        pwsh -command Install-Module -Name AWSLambdaPSCore -Scope CurrentUser -Force
        pwsh -command Import-Module -Name AWSLambdaPSCore
    - name: Package Up Artifact for Lambda
      if: success()
      run: |
        # ls -la ${{ github.workspace }}/code
        pwsh -command New-AWSPowershellLambdaPackage -ScriptPath ${{ github.workspace }}/code/new-org-account.ps1 -OutputPackage ${{ env.OUTPUT_PATH }}/new-org-account-${{ steps.package_version.outputs.version }}.zip
    - name: Upload Artifact
      if: success()
      uses: actions/upload-artifact@v1
      with:
        name: new-org-account-${{ steps.package_version.outputs.version }}.zip
        path: ${{ env.OUTPUT_PATH }}/new-org-account-${{ steps.package_version.outputs.version }}.zip
  create_github_release:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      # Clone the repository to get the ./scripts/get-pkg-version.js and the ./package.json
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          path: code
      - name: Retrieve the current package version
        id: package_version
        run: |
          pkgver=$(node ./code/scripts/get-pkg-version.js)
          echo ::set-output name=version::$pkgver
      - name: Download Build Artifact
        uses: actions/download-artifact@v1
        with:
            name: new-org-account-${{ steps.package_version.outputs.version }}.zip
            path: ${{ env.OUTPUT_PATH }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.package_version.outputs.version }}
          release_name: Release ${{ steps.package_version.outputs.version }}
          body: If you can read this, we have forgotten to fill in the changelog. Sorry!
          draft: true # Always create as draft, so that we can populate the remaining values easily
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ env.OUTPUT_PATH }}/new-org-account-${{ steps.package_version.outputs.version }}.zip
          asset_name: new-org-account-${{ steps.package_version.outputs.version }}.zip
          asset_content_type: application/zip
  deploy_lambda_aws:
      runs-on: [ubuntu-latest]
      needs: [create_github_release]
      steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          path: code
      - name: Retrieve the current package version
        id: package_version
        run: |
          pkgver=$(node ./code/scripts/get-pkg-version.js)
          echo ::set-output name=version::$pkgver
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.LAMBDA_REGION }}
      - name: Test AWS Credentials
        if: success()
        run: aws s3 ls 
      - name: Download Build Artifact
        if: success()
        uses: actions/download-artifact@v1
        with:
            name: new-org-account-${{ steps.package_version.outputs.version }}.zip
            path: ${{ env.OUTPUT_PATH }}
      - name: S3 Upload Artifact
        if: success()
        run: aws s3 cp ${{ env.OUTPUT_PATH }}/new-org-account-${{ steps.package_version.outputs.version }}.zip s3://${{ env.S3_BUCKET_NAME }}/new-org-account-${{ github.sha }}.zip
      - name: Update Lambda Code
        if: success()
        run: aws lambda update-function-code --publish --function-name ${{ env.LAMBDA_FUNCTION }} --s3-bucket ${{ env.S3_BUCKET_NAME }} --s3-key new-org-account-${{ github.sha }}.zip

        
        
       

